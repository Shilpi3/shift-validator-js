"use strict";

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var keyword = require("esutils").keyword;
var isRestrictedWord = keyword.isRestrictedWord;
var isReservedWordES5 = keyword.isReservedWordES5;
var ValidationContext = exports.ValidationContext = (function () {
  function ValidationContext(freeBreakStatements, freeContinueStatements, usedLabelNames, freeJumpTargets, freeReturnStatements, uninitialisedDeclarators, errors, strictErrors) {
    _classCallCheck(this, ValidationContext);

    this.freeBreakStatements = freeBreakStatements;
    this.freeContinueStatements = freeContinueStatements;
    this.usedLabelNames = usedLabelNames;
    this.freeJumpTargets = freeJumpTargets;
    this.freeReturnStatements = freeReturnStatements;
    this.uninitialisedDeclarators = uninitialisedDeclarators, this.errors = errors;
    this.strictErrors = strictErrors;
  }

  _prototypeProperties(ValidationContext, {
    empty: {
      value: function empty() {
        return new ValidationContext([], [], [], [], [], [], [], []);
      },
      writable: true,
      configurable: true
    }
  }, {
    addFreeBreakStatement: {
      value: function addFreeBreakStatement(s) {
        return new ValidationContext(this.freeBreakStatements.concat([s]), this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    clearFreeBreakStatements: {
      value: function clearFreeBreakStatements() {
        return new ValidationContext([], this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    addFreeContinueStatement: {
      value: function addFreeContinueStatement(s) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements.concat([s]), this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    clearFreeContinueStatements: {
      value: function clearFreeContinueStatements() {
        return new ValidationContext(this.freeBreakStatements, [], this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    observeIterationLabelName: {
      value: function observeIterationLabelName(label) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames.concat([label.name]), this.freeJumpTargets.filter(function (info) {
          return info.name !== label.name;
        }), this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    observeNonIterationLabelName: {
      value: function observeNonIterationLabelName(label) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames.concat([label.name]), this.freeJumpTargets.filter(function (info) {
          return info.name !== label.name || info.type !== "break";
        }), this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    clearUsedLabelNames: {
      value: function clearUsedLabelNames() {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, [], this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    addFreeBreakJumpTarget: {
      value: function addFreeBreakJumpTarget(label) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets.concat([{ name: label.name, type: "break" }]), this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    addFreeContinueJumpTarget: {
      value: function addFreeContinueJumpTarget(label) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets.concat([{ name: label.name, type: "continue" }]), this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    addFreeReturnStatement: {
      value: function addFreeReturnStatement(r) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements.concat([r]), this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    clearFreeReturnStatements: {
      value: function clearFreeReturnStatements() {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, [], this.uninitialisedDeclarators, this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    checkReserved: {
      value: function checkReserved(identifier) {
        if (isReservedWordES5(identifier.name, true)) {
          if (isReservedWordES5(identifier.name, false)) {
            return this.addError(new ValidationError(identifier, "Identifier must not be reserved word in this position"));
          }
          return this.addStrictError(new ValidationError(identifier, "Identifier must not be strict mode reserved word in this position"));
        }
        return this;
      },
      writable: true,
      configurable: true
    },
    checkRestricted: {
      value: function checkRestricted(identifier) {
        var v = this.checkReserved(identifier);
        if (isRestrictedWord(identifier.name)) {
          return v.addStrictError(new ValidationError(identifier, "Identifier must not be restricted word in this position in strict mode"));
        }
        return v;
      },
      writable: true,
      configurable: true
    },
    addError: {
      value: function addError(e) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors.concat([e]), this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    enforceFreeBreakAndContinueStatementErrors: {
      value: function enforceFreeBreakAndContinueStatementErrors() {
        return new ValidationContext([], [], this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors.concat(this.freeBreakStatements).concat(this.freeContinueStatements), this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    enforceFreeReturnStatementErrors: {
      value: function enforceFreeReturnStatementErrors() {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, [], this.uninitialisedDeclarators, this.errors.concat(this.freeReturnStatements), this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    addUninitialisedDeclarator: {
      value: function addUninitialisedDeclarator(node) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators.concat(node), this.errors, this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    enforceUninitialisedDeclarators: {
      value: function enforceUninitialisedDeclarators() {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, [], this.errors.concat(this.uninitialisedDeclarators), this.strictErrors);
      },
      writable: true,
      configurable: true
    },
    enforceStrictErrors: {
      value: function enforceStrictErrors() {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors.concat(this.strictErrors), []);
      },
      writable: true,
      configurable: true
    },
    addStrictError: {
      value: function addStrictError(e) {
        return new ValidationContext(this.freeBreakStatements, this.freeContinueStatements, this.usedLabelNames, this.freeJumpTargets, this.freeReturnStatements, this.uninitialisedDeclarators, this.errors, this.strictErrors.concat([e]));
      },
      writable: true,
      configurable: true
    },
    concat: {
      value: function concat(v) {
        return new ValidationContext(this.freeBreakStatements.concat(v.freeBreakStatements), this.freeContinueStatements.concat(v.freeContinueStatements), this.usedLabelNames.concat(v.usedLabelNames), this.freeJumpTargets.concat(v.freeJumpTargets), this.freeReturnStatements.concat(v.freeReturnStatements), this.uninitialisedDeclarators.concat(v.uninitialisedDeclarators), this.errors.concat(v.errors), this.strictErrors.concat(v.strictErrors));
      },
      writable: true,
      configurable: true
    }
  });

  return ValidationContext;
})();
var ValidationError = exports.ValidationError = (function (Error) {
  function ValidationError(node, message) {
    _classCallCheck(this, ValidationError);

    this.node = node;
    this.message = message;
  }

  _inherits(ValidationError, Error);

  return ValidationError;
})(Error);
//# sourceMappingURL=data:application/json;base64,